// <auto-generated />
using System;
using CourseManager.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourseManager.Infrastructure.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    partial class CourseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseManager.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2287c8d6-3925-47f2-a180-fb12b7320f89"),
                            Name = "Phát triển"
                        },
                        new
                        {
                            Id = new Guid("2733ca09-978b-429d-a9b3-4542c023dfe4"),
                            Name = "Kinh doanh"
                        },
                        new
                        {
                            Id = new Guid("7e372f12-0a91-4eac-abcd-b20ca00536da"),
                            Name = "Thiết kế"
                        });
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CourseImage")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Visuability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.CourseMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<double>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<int>("ReviewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("CoursesMetadata");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("LectureContentUrl")
                        .HasColumnType("text");

                    b.Property<int>("LectureLength")
                        .HasColumnType("integer");

                    b.Property<int>("LectureNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("VideoName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ExternalLinkUrl")
                        .HasColumnType("text");

                    b.Property<string>("FilesType")
                        .HasColumnType("text");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LectureId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3568698a-9903-49ae-a512-944130356ac8"),
                            Name = "Phát triển Web",
                            ParentCategoryId = new Guid("2287c8d6-3925-47f2-a180-fb12b7320f89")
                        },
                        new
                        {
                            Id = new Guid("b3497323-f975-49dc-86e5-2c464298fc8a"),
                            Name = "Khoa học dữ liệu",
                            ParentCategoryId = new Guid("2287c8d6-3925-47f2-a180-fb12b7320f89")
                        },
                        new
                        {
                            Id = new Guid("95e1f716-2bb5-4236-b722-f25efe6b5e79"),
                            Name = "Phát triển mobile",
                            ParentCategoryId = new Guid("2287c8d6-3925-47f2-a180-fb12b7320f89")
                        },
                        new
                        {
                            Id = new Guid("90f31a65-8911-45e0-9339-5f0b18dedb34"),
                            Name = "Giao tiếp",
                            ParentCategoryId = new Guid("2733ca09-978b-429d-a9b3-4542c023dfe4")
                        },
                        new
                        {
                            Id = new Guid("3720757c-debf-4fce-b0b6-f8944013eb22"),
                            Name = "Thiết kế Web",
                            ParentCategoryId = new Guid("7e372f12-0a91-4eac-abcd-b20ca00536da")
                        });
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Course", b =>
                {
                    b.HasOne("CourseManager.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseManager.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.CourseMetadata", b =>
                {
                    b.HasOne("CourseManager.Domain.Entities.Course", null)
                        .WithOne("Metadata")
                        .HasForeignKey("CourseManager.Domain.Entities.CourseMetadata", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Lecture", b =>
                {
                    b.HasOne("CourseManager.Domain.Entities.Section", null)
                        .WithMany("Lectures")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Resource", b =>
                {
                    b.HasOne("CourseManager.Domain.Entities.Lecture", null)
                        .WithMany("Resources")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Section", b =>
                {
                    b.HasOne("CourseManager.Domain.Entities.Course", null)
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("CourseManager.Domain.Entities.Category", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Course", b =>
                {
                    b.Navigation("Metadata")
                        .IsRequired();

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Lecture", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("CourseManager.Domain.Entities.Section", b =>
                {
                    b.Navigation("Lectures");
                });
#pragma warning restore 612, 618
        }
    }
}
