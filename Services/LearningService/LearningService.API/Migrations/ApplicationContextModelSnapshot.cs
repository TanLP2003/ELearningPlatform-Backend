// <auto-generated />
using System;
using LearningService.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LearningService.API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LearningService.API.Entities.CourseReview", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "CourseId");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("LearningService.API.Entities.EnrolledCourse", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<float?>("CompletionPercentage")
                        .HasColumnType("real");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "CourseId");

                    b.ToTable("EnrolledCourses");
                });

            modelBuilder.Entity("LearningService.API.Entities.LearningNote", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("NoteAt")
                        .HasColumnType("interval");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "CourseId", "LectureId", "NoteAt");

                    b.ToTable("LearningNotes");
                });

            modelBuilder.Entity("LearningService.API.Entities.CourseReview", b =>
                {
                    b.HasOne("LearningService.API.Entities.EnrolledCourse", "EnrolledCourse")
                        .WithOne("CourseReview")
                        .HasForeignKey("LearningService.API.Entities.CourseReview", "UserId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnrolledCourse");
                });

            modelBuilder.Entity("LearningService.API.Entities.LearningNote", b =>
                {
                    b.HasOne("LearningService.API.Entities.EnrolledCourse", "EnrolledCourse")
                        .WithMany("LearningNotes")
                        .HasForeignKey("UserId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EnrolledCourse");
                });

            modelBuilder.Entity("LearningService.API.Entities.EnrolledCourse", b =>
                {
                    b.Navigation("CourseReview")
                        .IsRequired();

                    b.Navigation("LearningNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
